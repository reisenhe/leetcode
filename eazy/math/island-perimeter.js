// 给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地 0 表示水域。
// 网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。
// 岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。
// 输入:
// [[0,1,0,0],
//  [1,1,1,0],
//  [0,1,0,0],
//  [1,1,0,0]]

// 输出: 16

// 思路：
// 1、边长 = 每个格子的边长 - 重合次数 * 2
// 2、在循环中得到所有格子的数量和重合次数，计算既可
var islandPerimeter = function(grid) {
    let clxNum = 0;
    let boxNum = 0;
    for (let i = 0; i < grid.length; i++) {
        let row = grid[i]
        for (let j = 0; j < row.length; j++) {
            if (row[j]) {
                // 计算格子数
                boxNum ++
                // 从第2行开始，计算重合边
                if (i > 0 && grid[i - 1][j]) {
                    clxNum ++
                }
                // 从每行第2个格子开始，计算重合边
                if (j > 0 && row[j - 1]) {
                    clxNum ++
                }
            }
        }
    }
    let ans = boxNum * 4 - clxNum * 2
    return ans
};